/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// EmailRecipient List of recipients (visible to others)
type EmailRecipient struct {
	// Proper email address.
	Email *string `json:"Email,omitempty"`
	// A key-value collection of merge fields which can be used in e-mail body.
	Fields *map[string]string `json:"Fields,omitempty"`
}

// NewEmailRecipient instantiates a new EmailRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRecipient() *EmailRecipient {
	this := EmailRecipient{}
	return &this
}

// NewEmailRecipientWithDefaults instantiates a new EmailRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRecipientWithDefaults() *EmailRecipient {
	this := EmailRecipient{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailRecipient) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRecipient) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailRecipient) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailRecipient) SetEmail(v string) {
	o.Email = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *EmailRecipient) GetFields() map[string]string {
	if o == nil || o.Fields == nil {
		var ret map[string]string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRecipient) GetFieldsOk() (*map[string]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *EmailRecipient) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]string and assigns it to the Fields field.
func (o *EmailRecipient) SetFields(v map[string]string) {
	o.Fields = &v
}

func (o EmailRecipient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["Email"] = o.Email
	}
	if o.Fields != nil {
		toSerialize["Fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableEmailRecipient struct {
	value *EmailRecipient
	isSet bool
}

func (v NullableEmailRecipient) Get() *EmailRecipient {
	return v.value
}

func (v *NullableEmailRecipient) Set(val *EmailRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRecipient(val *EmailRecipient) *NullableEmailRecipient {
	return &NullableEmailRecipient{value: val, isSet: true}
}

func (v NullableEmailRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


