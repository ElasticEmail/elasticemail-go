/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// EmailView Email details formatted in json
type EmailView struct {
	// Body (HTML, otherwise plain text) of email
	Body *string `json:"Body,omitempty"`
	// Default subject of email.
	Subject *string `json:"Subject,omitempty"`
	// From email address
	From *string `json:"From,omitempty"`
}

// NewEmailView instantiates a new EmailView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailView() *EmailView {
	this := EmailView{}
	return &this
}

// NewEmailViewWithDefaults instantiates a new EmailView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailViewWithDefaults() *EmailView {
	this := EmailView{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *EmailView) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailView) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *EmailView) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *EmailView) SetBody(v string) {
	o.Body = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailView) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailView) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailView) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailView) SetSubject(v string) {
	o.Subject = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailView) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailView) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailView) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *EmailView) SetFrom(v string) {
	o.From = &v
}

func (o EmailView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["Body"] = o.Body
	}
	if o.Subject != nil {
		toSerialize["Subject"] = o.Subject
	}
	if o.From != nil {
		toSerialize["From"] = o.From
	}
	return json.Marshal(toSerialize)
}

type NullableEmailView struct {
	value *EmailView
	isSet bool
}

func (v NullableEmailView) Get() *EmailView {
	return v.value
}

func (v *NullableEmailView) Set(val *EmailView) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailView) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailView(val *EmailView) *NullableEmailView {
	return &NullableEmailView{value: val, isSet: true}
}

func (v NullableEmailView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


