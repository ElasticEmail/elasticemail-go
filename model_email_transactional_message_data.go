/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// EmailTransactionalMessageData Email data
type EmailTransactionalMessageData struct {
	// List of transactional recipients
	Recipients *TransactionalRecipient `json:"Recipients,omitempty"`
	// Proper e-mail content
	Content *EmailContent `json:"Content,omitempty"`
	// E-mail configuration
	Options *Options `json:"Options,omitempty"`
}

// NewEmailTransactionalMessageData instantiates a new EmailTransactionalMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailTransactionalMessageData() *EmailTransactionalMessageData {
	this := EmailTransactionalMessageData{}
	return &this
}

// NewEmailTransactionalMessageDataWithDefaults instantiates a new EmailTransactionalMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTransactionalMessageDataWithDefaults() *EmailTransactionalMessageData {
	this := EmailTransactionalMessageData{}
	return &this
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *EmailTransactionalMessageData) GetRecipients() TransactionalRecipient {
	if o == nil || o.Recipients == nil {
		var ret TransactionalRecipient
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetRecipientsOk() (*TransactionalRecipient, bool) {
	if o == nil || o.Recipients == nil {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *EmailTransactionalMessageData) HasRecipients() bool {
	if o != nil && o.Recipients != nil {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given TransactionalRecipient and assigns it to the Recipients field.
func (o *EmailTransactionalMessageData) SetRecipients(v TransactionalRecipient) {
	o.Recipients = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EmailTransactionalMessageData) GetContent() EmailContent {
	if o == nil || o.Content == nil {
		var ret EmailContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetContentOk() (*EmailContent, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EmailTransactionalMessageData) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given EmailContent and assigns it to the Content field.
func (o *EmailTransactionalMessageData) SetContent(v EmailContent) {
	o.Content = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *EmailTransactionalMessageData) GetOptions() Options {
	if o == nil || o.Options == nil {
		var ret Options
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetOptionsOk() (*Options, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *EmailTransactionalMessageData) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given Options and assigns it to the Options field.
func (o *EmailTransactionalMessageData) SetOptions(v Options) {
	o.Options = &v
}

func (o EmailTransactionalMessageData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Recipients != nil {
		toSerialize["Recipients"] = o.Recipients
	}
	if o.Content != nil {
		toSerialize["Content"] = o.Content
	}
	if o.Options != nil {
		toSerialize["Options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableEmailTransactionalMessageData struct {
	value *EmailTransactionalMessageData
	isSet bool
}

func (v NullableEmailTransactionalMessageData) Get() *EmailTransactionalMessageData {
	return v.value
}

func (v *NullableEmailTransactionalMessageData) Set(val *EmailTransactionalMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailTransactionalMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailTransactionalMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailTransactionalMessageData(val *EmailTransactionalMessageData) *NullableEmailTransactionalMessageData {
	return &NullableEmailTransactionalMessageData{value: val, isSet: true}
}

func (v NullableEmailTransactionalMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailTransactionalMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


