/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// Campaign struct for Campaign
type Campaign struct {
	// Campaign's email content. Provide multiple items to send an A/X Split Campaign
	Content *[]CampaignTemplate `json:"Content,omitempty"`
	// Campaign name
	Name *string `json:"Name,omitempty"`
	// Campaign status
	Status *CampaignStatus `json:"Status,omitempty"`
	// Recipients this campaign should be sent to
	Recipients *CampaignRecipient `json:"Recipients,omitempty"`
	// Campaign sending options
	Options *CampaignOptions `json:"Options,omitempty"`
}

// NewCampaign instantiates a new Campaign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaign() *Campaign {
	this := Campaign{}
	return &this
}

// NewCampaignWithDefaults instantiates a new Campaign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignWithDefaults() *Campaign {
	this := Campaign{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Campaign) GetContent() []CampaignTemplate {
	if o == nil || o.Content == nil {
		var ret []CampaignTemplate
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Campaign) GetContentOk() (*[]CampaignTemplate, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Campaign) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given []CampaignTemplate and assigns it to the Content field.
func (o *Campaign) SetContent(v []CampaignTemplate) {
	o.Content = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Campaign) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Campaign) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Campaign) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Campaign) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Campaign) GetStatus() CampaignStatus {
	if o == nil || o.Status == nil {
		var ret CampaignStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Campaign) GetStatusOk() (*CampaignStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Campaign) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CampaignStatus and assigns it to the Status field.
func (o *Campaign) SetStatus(v CampaignStatus) {
	o.Status = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *Campaign) GetRecipients() CampaignRecipient {
	if o == nil || o.Recipients == nil {
		var ret CampaignRecipient
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Campaign) GetRecipientsOk() (*CampaignRecipient, bool) {
	if o == nil || o.Recipients == nil {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *Campaign) HasRecipients() bool {
	if o != nil && o.Recipients != nil {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given CampaignRecipient and assigns it to the Recipients field.
func (o *Campaign) SetRecipients(v CampaignRecipient) {
	o.Recipients = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Campaign) GetOptions() CampaignOptions {
	if o == nil || o.Options == nil {
		var ret CampaignOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Campaign) GetOptionsOk() (*CampaignOptions, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Campaign) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CampaignOptions and assigns it to the Options field.
func (o *Campaign) SetOptions(v CampaignOptions) {
	o.Options = &v
}

func (o Campaign) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["Content"] = o.Content
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Recipients != nil {
		toSerialize["Recipients"] = o.Recipients
	}
	if o.Options != nil {
		toSerialize["Options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableCampaign struct {
	value *Campaign
	isSet bool
}

func (v NullableCampaign) Get() *Campaign {
	return v.value
}

func (v *NullableCampaign) Set(val *Campaign) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaign) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaign(val *Campaign) *NullableCampaign {
	return &NullableCampaign{value: val, isSet: true}
}

func (v NullableCampaign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


