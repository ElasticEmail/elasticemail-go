/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
	"fmt"
)

// MessageCategoryEnum the model 'MessageCategoryEnum'
type MessageCategoryEnum string

// List of MessageCategoryEnum
const (
	MESSAGECATEGORYENUM_UNKNOWN MessageCategoryEnum = "Unknown"
	MESSAGECATEGORYENUM_IGNORE MessageCategoryEnum = "Ignore"
	MESSAGECATEGORYENUM_SPAM MessageCategoryEnum = "Spam"
	MESSAGECATEGORYENUM_BLACK_LISTED MessageCategoryEnum = "BlackListed"
	MESSAGECATEGORYENUM_NO_MAILBOX MessageCategoryEnum = "NoMailbox"
	MESSAGECATEGORYENUM_GREY_LISTED MessageCategoryEnum = "GreyListed"
	MESSAGECATEGORYENUM_THROTTLED MessageCategoryEnum = "Throttled"
	MESSAGECATEGORYENUM_TIMEOUT MessageCategoryEnum = "Timeout"
	MESSAGECATEGORYENUM_CONNECTION_PROBLEM MessageCategoryEnum = "ConnectionProblem"
	MESSAGECATEGORYENUM_SPF_PROBLEM MessageCategoryEnum = "SPFProblem"
	MESSAGECATEGORYENUM_ACCOUNT_PROBLEM MessageCategoryEnum = "AccountProblem"
	MESSAGECATEGORYENUM_DNS_PROBLEM MessageCategoryEnum = "DNSProblem"
	MESSAGECATEGORYENUM_NOT_DELIVERED_CANCELLED MessageCategoryEnum = "NotDeliveredCancelled"
	MESSAGECATEGORYENUM_CODE_ERROR MessageCategoryEnum = "CodeError"
	MESSAGECATEGORYENUM_MANUAL_CANCEL MessageCategoryEnum = "ManualCancel"
	MESSAGECATEGORYENUM_CONNECTION_TERMINATED MessageCategoryEnum = "ConnectionTerminated"
	MESSAGECATEGORYENUM_NOT_DELIVERED MessageCategoryEnum = "NotDelivered"
)

// All allowed values of MessageCategoryEnum enum
var AllowedMessageCategoryEnumEnumValues = []MessageCategoryEnum{
	"Unknown",
	"Ignore",
	"Spam",
	"BlackListed",
	"NoMailbox",
	"GreyListed",
	"Throttled",
	"Timeout",
	"ConnectionProblem",
	"SPFProblem",
	"AccountProblem",
	"DNSProblem",
	"NotDeliveredCancelled",
	"CodeError",
	"ManualCancel",
	"ConnectionTerminated",
	"NotDelivered",
}

func (v *MessageCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageCategoryEnum(value)
	for _, existing := range AllowedMessageCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageCategoryEnum", value)
}

// NewMessageCategoryEnumFromValue returns a pointer to a valid MessageCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageCategoryEnumFromValue(v string) (*MessageCategoryEnum, error) {
	ev := MessageCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageCategoryEnum: valid values are %v", v, AllowedMessageCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageCategoryEnum) IsValid() bool {
	for _, existing := range AllowedMessageCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageCategoryEnum value
func (v MessageCategoryEnum) Ptr() *MessageCategoryEnum {
	return &v
}

type NullableMessageCategoryEnum struct {
	value *MessageCategoryEnum
	isSet bool
}

func (v NullableMessageCategoryEnum) Get() *MessageCategoryEnum {
	return v.value
}

func (v *NullableMessageCategoryEnum) Set(val *MessageCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageCategoryEnum(val *MessageCategoryEnum) *NullableMessageCategoryEnum {
	return &NullableMessageCategoryEnum{value: val, isSet: true}
}

func (v NullableMessageCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

