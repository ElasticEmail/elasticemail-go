/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// EmailContent Proper e-mail content
type EmailContent struct {
	// List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)
	Body *[]BodyPart `json:"Body,omitempty"`
	// A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.
	Merge *map[string]string `json:"Merge,omitempty"`
	// Attachments provided by sending binary data
	Attachments *[]MessageAttachment `json:"Attachments,omitempty"`
	// A key-value collection of custom e-mail headers.
	Headers *map[string]string `json:"Headers,omitempty"`
	// Postback header.
	Postback *string `json:"Postback,omitempty"`
	// Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
	From *string `json:"From,omitempty"`
	// To what address should the recipients reply to (e.g. John Doe <email@domain.com>)
	ReplyTo *string `json:"ReplyTo,omitempty"`
	// Default subject of email.
	Subject *string `json:"Subject,omitempty"`
	// Name of template.
	TemplateName *string `json:"TemplateName,omitempty"`
	// Names of previously uploaded files that should be sent as downloadable attachments
	AttachFiles *[]string `json:"AttachFiles,omitempty"`
	// Utm marketing data to be attached to every link in this e-mail.
	Utm *Utm `json:"Utm,omitempty"`
}

// NewEmailContent instantiates a new EmailContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailContent() *EmailContent {
	this := EmailContent{}
	return &this
}

// NewEmailContentWithDefaults instantiates a new EmailContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailContentWithDefaults() *EmailContent {
	this := EmailContent{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *EmailContent) GetBody() []BodyPart {
	if o == nil || o.Body == nil {
		var ret []BodyPart
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetBodyOk() (*[]BodyPart, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *EmailContent) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given []BodyPart and assigns it to the Body field.
func (o *EmailContent) SetBody(v []BodyPart) {
	o.Body = &v
}

// GetMerge returns the Merge field value if set, zero value otherwise.
func (o *EmailContent) GetMerge() map[string]string {
	if o == nil || o.Merge == nil {
		var ret map[string]string
		return ret
	}
	return *o.Merge
}

// GetMergeOk returns a tuple with the Merge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetMergeOk() (*map[string]string, bool) {
	if o == nil || o.Merge == nil {
		return nil, false
	}
	return o.Merge, true
}

// HasMerge returns a boolean if a field has been set.
func (o *EmailContent) HasMerge() bool {
	if o != nil && o.Merge != nil {
		return true
	}

	return false
}

// SetMerge gets a reference to the given map[string]string and assigns it to the Merge field.
func (o *EmailContent) SetMerge(v map[string]string) {
	o.Merge = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *EmailContent) GetAttachments() []MessageAttachment {
	if o == nil || o.Attachments == nil {
		var ret []MessageAttachment
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetAttachmentsOk() (*[]MessageAttachment, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *EmailContent) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []MessageAttachment and assigns it to the Attachments field.
func (o *EmailContent) SetAttachments(v []MessageAttachment) {
	o.Attachments = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *EmailContent) GetHeaders() map[string]string {
	if o == nil || o.Headers == nil {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *EmailContent) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *EmailContent) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetPostback returns the Postback field value if set, zero value otherwise.
func (o *EmailContent) GetPostback() string {
	if o == nil || o.Postback == nil {
		var ret string
		return ret
	}
	return *o.Postback
}

// GetPostbackOk returns a tuple with the Postback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetPostbackOk() (*string, bool) {
	if o == nil || o.Postback == nil {
		return nil, false
	}
	return o.Postback, true
}

// HasPostback returns a boolean if a field has been set.
func (o *EmailContent) HasPostback() bool {
	if o != nil && o.Postback != nil {
		return true
	}

	return false
}

// SetPostback gets a reference to the given string and assigns it to the Postback field.
func (o *EmailContent) SetPostback(v string) {
	o.Postback = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailContent) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailContent) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *EmailContent) SetFrom(v string) {
	o.From = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *EmailContent) GetReplyTo() string {
	if o == nil || o.ReplyTo == nil {
		var ret string
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetReplyToOk() (*string, bool) {
	if o == nil || o.ReplyTo == nil {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *EmailContent) HasReplyTo() bool {
	if o != nil && o.ReplyTo != nil {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given string and assigns it to the ReplyTo field.
func (o *EmailContent) SetReplyTo(v string) {
	o.ReplyTo = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailContent) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailContent) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailContent) SetSubject(v string) {
	o.Subject = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *EmailContent) GetTemplateName() string {
	if o == nil || o.TemplateName == nil {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetTemplateNameOk() (*string, bool) {
	if o == nil || o.TemplateName == nil {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *EmailContent) HasTemplateName() bool {
	if o != nil && o.TemplateName != nil {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *EmailContent) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetAttachFiles returns the AttachFiles field value if set, zero value otherwise.
func (o *EmailContent) GetAttachFiles() []string {
	if o == nil || o.AttachFiles == nil {
		var ret []string
		return ret
	}
	return *o.AttachFiles
}

// GetAttachFilesOk returns a tuple with the AttachFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetAttachFilesOk() (*[]string, bool) {
	if o == nil || o.AttachFiles == nil {
		return nil, false
	}
	return o.AttachFiles, true
}

// HasAttachFiles returns a boolean if a field has been set.
func (o *EmailContent) HasAttachFiles() bool {
	if o != nil && o.AttachFiles != nil {
		return true
	}

	return false
}

// SetAttachFiles gets a reference to the given []string and assigns it to the AttachFiles field.
func (o *EmailContent) SetAttachFiles(v []string) {
	o.AttachFiles = &v
}

// GetUtm returns the Utm field value if set, zero value otherwise.
func (o *EmailContent) GetUtm() Utm {
	if o == nil || o.Utm == nil {
		var ret Utm
		return ret
	}
	return *o.Utm
}

// GetUtmOk returns a tuple with the Utm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetUtmOk() (*Utm, bool) {
	if o == nil || o.Utm == nil {
		return nil, false
	}
	return o.Utm, true
}

// HasUtm returns a boolean if a field has been set.
func (o *EmailContent) HasUtm() bool {
	if o != nil && o.Utm != nil {
		return true
	}

	return false
}

// SetUtm gets a reference to the given Utm and assigns it to the Utm field.
func (o *EmailContent) SetUtm(v Utm) {
	o.Utm = &v
}

func (o EmailContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["Body"] = o.Body
	}
	if o.Merge != nil {
		toSerialize["Merge"] = o.Merge
	}
	if o.Attachments != nil {
		toSerialize["Attachments"] = o.Attachments
	}
	if o.Headers != nil {
		toSerialize["Headers"] = o.Headers
	}
	if o.Postback != nil {
		toSerialize["Postback"] = o.Postback
	}
	if o.From != nil {
		toSerialize["From"] = o.From
	}
	if o.ReplyTo != nil {
		toSerialize["ReplyTo"] = o.ReplyTo
	}
	if o.Subject != nil {
		toSerialize["Subject"] = o.Subject
	}
	if o.TemplateName != nil {
		toSerialize["TemplateName"] = o.TemplateName
	}
	if o.AttachFiles != nil {
		toSerialize["AttachFiles"] = o.AttachFiles
	}
	if o.Utm != nil {
		toSerialize["Utm"] = o.Utm
	}
	return json.Marshal(toSerialize)
}

type NullableEmailContent struct {
	value *EmailContent
	isSet bool
}

func (v NullableEmailContent) Get() *EmailContent {
	return v.value
}

func (v *NullableEmailContent) Set(val *EmailContent) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailContent) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailContent(val *EmailContent) *NullableEmailContent {
	return &NullableEmailContent{value: val, isSet: true}
}

func (v NullableEmailContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


