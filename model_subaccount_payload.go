/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// SubaccountPayload New SubAccount payload
type SubaccountPayload struct {
	// Proper email address.
	Email *string `json:"Email,omitempty"`
	// Current password.
	Password *string `json:"Password,omitempty"`
	// True, if you want to send activation email to this Account to confirm the creation of a new SubAccount. Otherwise, false (SubAccount will immediately be Active).
	SendActivation *bool `json:"SendActivation,omitempty"`
	// SubAccount settings
	Settings *SubaccountSettingsInfoPayload `json:"Settings,omitempty"`
}

// NewSubaccountPayload instantiates a new SubaccountPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubaccountPayload() *SubaccountPayload {
	this := SubaccountPayload{}
	return &this
}

// NewSubaccountPayloadWithDefaults instantiates a new SubaccountPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubaccountPayloadWithDefaults() *SubaccountPayload {
	this := SubaccountPayload{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SubaccountPayload) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountPayload) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SubaccountPayload) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SubaccountPayload) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SubaccountPayload) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountPayload) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SubaccountPayload) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SubaccountPayload) SetPassword(v string) {
	o.Password = &v
}

// GetSendActivation returns the SendActivation field value if set, zero value otherwise.
func (o *SubaccountPayload) GetSendActivation() bool {
	if o == nil || o.SendActivation == nil {
		var ret bool
		return ret
	}
	return *o.SendActivation
}

// GetSendActivationOk returns a tuple with the SendActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountPayload) GetSendActivationOk() (*bool, bool) {
	if o == nil || o.SendActivation == nil {
		return nil, false
	}
	return o.SendActivation, true
}

// HasSendActivation returns a boolean if a field has been set.
func (o *SubaccountPayload) HasSendActivation() bool {
	if o != nil && o.SendActivation != nil {
		return true
	}

	return false
}

// SetSendActivation gets a reference to the given bool and assigns it to the SendActivation field.
func (o *SubaccountPayload) SetSendActivation(v bool) {
	o.SendActivation = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *SubaccountPayload) GetSettings() SubaccountSettingsInfoPayload {
	if o == nil || o.Settings == nil {
		var ret SubaccountSettingsInfoPayload
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountPayload) GetSettingsOk() (*SubaccountSettingsInfoPayload, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *SubaccountPayload) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given SubaccountSettingsInfoPayload and assigns it to the Settings field.
func (o *SubaccountPayload) SetSettings(v SubaccountSettingsInfoPayload) {
	o.Settings = &v
}

func (o SubaccountPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["Email"] = o.Email
	}
	if o.Password != nil {
		toSerialize["Password"] = o.Password
	}
	if o.SendActivation != nil {
		toSerialize["SendActivation"] = o.SendActivation
	}
	if o.Settings != nil {
		toSerialize["Settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableSubaccountPayload struct {
	value *SubaccountPayload
	isSet bool
}

func (v NullableSubaccountPayload) Get() *SubaccountPayload {
	return v.value
}

func (v *NullableSubaccountPayload) Set(val *SubaccountPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSubaccountPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSubaccountPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubaccountPayload(val *SubaccountPayload) *NullableSubaccountPayload {
	return &NullableSubaccountPayload{value: val, isSet: true}
}

func (v NullableSubaccountPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubaccountPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


