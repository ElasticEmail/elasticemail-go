/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// checks if the EmailJobStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailJobStatus{}

// EmailJobStatus struct for EmailJobStatus
type EmailJobStatus struct {
	// ID number of your attachment
	ID *string `json:"ID,omitempty"`
	// Name of status: submitted, complete, in_progress
	Status *string `json:"Status,omitempty"`
	RecipientsCount *int32 `json:"RecipientsCount,omitempty"`
	Failed []EmailJobFailedStatus `json:"Failed,omitempty"`
	// Total emails failed.
	FailedCount *int32 `json:"FailedCount,omitempty"`
	Sent []string `json:"Sent,omitempty"`
	// Total emails sent.
	SentCount *int32 `json:"SentCount,omitempty"`
	// Number of delivered messages
	Delivered []string `json:"Delivered,omitempty"`
	DeliveredCount *int32 `json:"DeliveredCount,omitempty"`
	Pending []string `json:"Pending,omitempty"`
	PendingCount *int32 `json:"PendingCount,omitempty"`
	// Number of opened messages
	Opened []string `json:"Opened,omitempty"`
	// Total emails opened.
	OpenedCount *int32 `json:"OpenedCount,omitempty"`
	// Number of clicked messages
	Clicked []string `json:"Clicked,omitempty"`
	// Total emails clicked
	ClickedCount *int32 `json:"ClickedCount,omitempty"`
	// Number of unsubscribed messages
	Unsubscribed []string `json:"Unsubscribed,omitempty"`
	// Total emails unsubscribed
	UnsubscribedCount *int32 `json:"UnsubscribedCount,omitempty"`
	AbuseReports []string `json:"AbuseReports,omitempty"`
	AbuseReportsCount *int32 `json:"AbuseReportsCount,omitempty"`
	// List of all MessageIDs for this job.
	MessageIDs []string `json:"MessageIDs,omitempty"`
}

// NewEmailJobStatus instantiates a new EmailJobStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailJobStatus() *EmailJobStatus {
	this := EmailJobStatus{}
	return &this
}

// NewEmailJobStatusWithDefaults instantiates a new EmailJobStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailJobStatusWithDefaults() *EmailJobStatus {
	this := EmailJobStatus{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *EmailJobStatus) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *EmailJobStatus) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *EmailJobStatus) SetID(v string) {
	o.ID = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmailJobStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmailJobStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmailJobStatus) SetStatus(v string) {
	o.Status = &v
}

// GetRecipientsCount returns the RecipientsCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetRecipientsCount() int32 {
	if o == nil || IsNil(o.RecipientsCount) {
		var ret int32
		return ret
	}
	return *o.RecipientsCount
}

// GetRecipientsCountOk returns a tuple with the RecipientsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetRecipientsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RecipientsCount) {
		return nil, false
	}
	return o.RecipientsCount, true
}

// HasRecipientsCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasRecipientsCount() bool {
	if o != nil && !IsNil(o.RecipientsCount) {
		return true
	}

	return false
}

// SetRecipientsCount gets a reference to the given int32 and assigns it to the RecipientsCount field.
func (o *EmailJobStatus) SetRecipientsCount(v int32) {
	o.RecipientsCount = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *EmailJobStatus) GetFailed() []EmailJobFailedStatus {
	if o == nil || IsNil(o.Failed) {
		var ret []EmailJobFailedStatus
		return ret
	}
	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetFailedOk() ([]EmailJobFailedStatus, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *EmailJobStatus) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given []EmailJobFailedStatus and assigns it to the Failed field.
func (o *EmailJobStatus) SetFailed(v []EmailJobFailedStatus) {
	o.Failed = v
}

// GetFailedCount returns the FailedCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetFailedCount() int32 {
	if o == nil || IsNil(o.FailedCount) {
		var ret int32
		return ret
	}
	return *o.FailedCount
}

// GetFailedCountOk returns a tuple with the FailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetFailedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedCount) {
		return nil, false
	}
	return o.FailedCount, true
}

// HasFailedCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasFailedCount() bool {
	if o != nil && !IsNil(o.FailedCount) {
		return true
	}

	return false
}

// SetFailedCount gets a reference to the given int32 and assigns it to the FailedCount field.
func (o *EmailJobStatus) SetFailedCount(v int32) {
	o.FailedCount = &v
}

// GetSent returns the Sent field value if set, zero value otherwise.
func (o *EmailJobStatus) GetSent() []string {
	if o == nil || IsNil(o.Sent) {
		var ret []string
		return ret
	}
	return o.Sent
}

// GetSentOk returns a tuple with the Sent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetSentOk() ([]string, bool) {
	if o == nil || IsNil(o.Sent) {
		return nil, false
	}
	return o.Sent, true
}

// HasSent returns a boolean if a field has been set.
func (o *EmailJobStatus) HasSent() bool {
	if o != nil && !IsNil(o.Sent) {
		return true
	}

	return false
}

// SetSent gets a reference to the given []string and assigns it to the Sent field.
func (o *EmailJobStatus) SetSent(v []string) {
	o.Sent = v
}

// GetSentCount returns the SentCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetSentCount() int32 {
	if o == nil || IsNil(o.SentCount) {
		var ret int32
		return ret
	}
	return *o.SentCount
}

// GetSentCountOk returns a tuple with the SentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetSentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SentCount) {
		return nil, false
	}
	return o.SentCount, true
}

// HasSentCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasSentCount() bool {
	if o != nil && !IsNil(o.SentCount) {
		return true
	}

	return false
}

// SetSentCount gets a reference to the given int32 and assigns it to the SentCount field.
func (o *EmailJobStatus) SetSentCount(v int32) {
	o.SentCount = &v
}

// GetDelivered returns the Delivered field value if set, zero value otherwise.
func (o *EmailJobStatus) GetDelivered() []string {
	if o == nil || IsNil(o.Delivered) {
		var ret []string
		return ret
	}
	return o.Delivered
}

// GetDeliveredOk returns a tuple with the Delivered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetDeliveredOk() ([]string, bool) {
	if o == nil || IsNil(o.Delivered) {
		return nil, false
	}
	return o.Delivered, true
}

// HasDelivered returns a boolean if a field has been set.
func (o *EmailJobStatus) HasDelivered() bool {
	if o != nil && !IsNil(o.Delivered) {
		return true
	}

	return false
}

// SetDelivered gets a reference to the given []string and assigns it to the Delivered field.
func (o *EmailJobStatus) SetDelivered(v []string) {
	o.Delivered = v
}

// GetDeliveredCount returns the DeliveredCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetDeliveredCount() int32 {
	if o == nil || IsNil(o.DeliveredCount) {
		var ret int32
		return ret
	}
	return *o.DeliveredCount
}

// GetDeliveredCountOk returns a tuple with the DeliveredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetDeliveredCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DeliveredCount) {
		return nil, false
	}
	return o.DeliveredCount, true
}

// HasDeliveredCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasDeliveredCount() bool {
	if o != nil && !IsNil(o.DeliveredCount) {
		return true
	}

	return false
}

// SetDeliveredCount gets a reference to the given int32 and assigns it to the DeliveredCount field.
func (o *EmailJobStatus) SetDeliveredCount(v int32) {
	o.DeliveredCount = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *EmailJobStatus) GetPending() []string {
	if o == nil || IsNil(o.Pending) {
		var ret []string
		return ret
	}
	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetPendingOk() ([]string, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *EmailJobStatus) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given []string and assigns it to the Pending field.
func (o *EmailJobStatus) SetPending(v []string) {
	o.Pending = v
}

// GetPendingCount returns the PendingCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetPendingCount() int32 {
	if o == nil || IsNil(o.PendingCount) {
		var ret int32
		return ret
	}
	return *o.PendingCount
}

// GetPendingCountOk returns a tuple with the PendingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetPendingCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingCount) {
		return nil, false
	}
	return o.PendingCount, true
}

// HasPendingCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasPendingCount() bool {
	if o != nil && !IsNil(o.PendingCount) {
		return true
	}

	return false
}

// SetPendingCount gets a reference to the given int32 and assigns it to the PendingCount field.
func (o *EmailJobStatus) SetPendingCount(v int32) {
	o.PendingCount = &v
}

// GetOpened returns the Opened field value if set, zero value otherwise.
func (o *EmailJobStatus) GetOpened() []string {
	if o == nil || IsNil(o.Opened) {
		var ret []string
		return ret
	}
	return o.Opened
}

// GetOpenedOk returns a tuple with the Opened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetOpenedOk() ([]string, bool) {
	if o == nil || IsNil(o.Opened) {
		return nil, false
	}
	return o.Opened, true
}

// HasOpened returns a boolean if a field has been set.
func (o *EmailJobStatus) HasOpened() bool {
	if o != nil && !IsNil(o.Opened) {
		return true
	}

	return false
}

// SetOpened gets a reference to the given []string and assigns it to the Opened field.
func (o *EmailJobStatus) SetOpened(v []string) {
	o.Opened = v
}

// GetOpenedCount returns the OpenedCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetOpenedCount() int32 {
	if o == nil || IsNil(o.OpenedCount) {
		var ret int32
		return ret
	}
	return *o.OpenedCount
}

// GetOpenedCountOk returns a tuple with the OpenedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetOpenedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenedCount) {
		return nil, false
	}
	return o.OpenedCount, true
}

// HasOpenedCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasOpenedCount() bool {
	if o != nil && !IsNil(o.OpenedCount) {
		return true
	}

	return false
}

// SetOpenedCount gets a reference to the given int32 and assigns it to the OpenedCount field.
func (o *EmailJobStatus) SetOpenedCount(v int32) {
	o.OpenedCount = &v
}

// GetClicked returns the Clicked field value if set, zero value otherwise.
func (o *EmailJobStatus) GetClicked() []string {
	if o == nil || IsNil(o.Clicked) {
		var ret []string
		return ret
	}
	return o.Clicked
}

// GetClickedOk returns a tuple with the Clicked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetClickedOk() ([]string, bool) {
	if o == nil || IsNil(o.Clicked) {
		return nil, false
	}
	return o.Clicked, true
}

// HasClicked returns a boolean if a field has been set.
func (o *EmailJobStatus) HasClicked() bool {
	if o != nil && !IsNil(o.Clicked) {
		return true
	}

	return false
}

// SetClicked gets a reference to the given []string and assigns it to the Clicked field.
func (o *EmailJobStatus) SetClicked(v []string) {
	o.Clicked = v
}

// GetClickedCount returns the ClickedCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetClickedCount() int32 {
	if o == nil || IsNil(o.ClickedCount) {
		var ret int32
		return ret
	}
	return *o.ClickedCount
}

// GetClickedCountOk returns a tuple with the ClickedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetClickedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClickedCount) {
		return nil, false
	}
	return o.ClickedCount, true
}

// HasClickedCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasClickedCount() bool {
	if o != nil && !IsNil(o.ClickedCount) {
		return true
	}

	return false
}

// SetClickedCount gets a reference to the given int32 and assigns it to the ClickedCount field.
func (o *EmailJobStatus) SetClickedCount(v int32) {
	o.ClickedCount = &v
}

// GetUnsubscribed returns the Unsubscribed field value if set, zero value otherwise.
func (o *EmailJobStatus) GetUnsubscribed() []string {
	if o == nil || IsNil(o.Unsubscribed) {
		var ret []string
		return ret
	}
	return o.Unsubscribed
}

// GetUnsubscribedOk returns a tuple with the Unsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetUnsubscribedOk() ([]string, bool) {
	if o == nil || IsNil(o.Unsubscribed) {
		return nil, false
	}
	return o.Unsubscribed, true
}

// HasUnsubscribed returns a boolean if a field has been set.
func (o *EmailJobStatus) HasUnsubscribed() bool {
	if o != nil && !IsNil(o.Unsubscribed) {
		return true
	}

	return false
}

// SetUnsubscribed gets a reference to the given []string and assigns it to the Unsubscribed field.
func (o *EmailJobStatus) SetUnsubscribed(v []string) {
	o.Unsubscribed = v
}

// GetUnsubscribedCount returns the UnsubscribedCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetUnsubscribedCount() int32 {
	if o == nil || IsNil(o.UnsubscribedCount) {
		var ret int32
		return ret
	}
	return *o.UnsubscribedCount
}

// GetUnsubscribedCountOk returns a tuple with the UnsubscribedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetUnsubscribedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnsubscribedCount) {
		return nil, false
	}
	return o.UnsubscribedCount, true
}

// HasUnsubscribedCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasUnsubscribedCount() bool {
	if o != nil && !IsNil(o.UnsubscribedCount) {
		return true
	}

	return false
}

// SetUnsubscribedCount gets a reference to the given int32 and assigns it to the UnsubscribedCount field.
func (o *EmailJobStatus) SetUnsubscribedCount(v int32) {
	o.UnsubscribedCount = &v
}

// GetAbuseReports returns the AbuseReports field value if set, zero value otherwise.
func (o *EmailJobStatus) GetAbuseReports() []string {
	if o == nil || IsNil(o.AbuseReports) {
		var ret []string
		return ret
	}
	return o.AbuseReports
}

// GetAbuseReportsOk returns a tuple with the AbuseReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetAbuseReportsOk() ([]string, bool) {
	if o == nil || IsNil(o.AbuseReports) {
		return nil, false
	}
	return o.AbuseReports, true
}

// HasAbuseReports returns a boolean if a field has been set.
func (o *EmailJobStatus) HasAbuseReports() bool {
	if o != nil && !IsNil(o.AbuseReports) {
		return true
	}

	return false
}

// SetAbuseReports gets a reference to the given []string and assigns it to the AbuseReports field.
func (o *EmailJobStatus) SetAbuseReports(v []string) {
	o.AbuseReports = v
}

// GetAbuseReportsCount returns the AbuseReportsCount field value if set, zero value otherwise.
func (o *EmailJobStatus) GetAbuseReportsCount() int32 {
	if o == nil || IsNil(o.AbuseReportsCount) {
		var ret int32
		return ret
	}
	return *o.AbuseReportsCount
}

// GetAbuseReportsCountOk returns a tuple with the AbuseReportsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetAbuseReportsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AbuseReportsCount) {
		return nil, false
	}
	return o.AbuseReportsCount, true
}

// HasAbuseReportsCount returns a boolean if a field has been set.
func (o *EmailJobStatus) HasAbuseReportsCount() bool {
	if o != nil && !IsNil(o.AbuseReportsCount) {
		return true
	}

	return false
}

// SetAbuseReportsCount gets a reference to the given int32 and assigns it to the AbuseReportsCount field.
func (o *EmailJobStatus) SetAbuseReportsCount(v int32) {
	o.AbuseReportsCount = &v
}

// GetMessageIDs returns the MessageIDs field value if set, zero value otherwise.
func (o *EmailJobStatus) GetMessageIDs() []string {
	if o == nil || IsNil(o.MessageIDs) {
		var ret []string
		return ret
	}
	return o.MessageIDs
}

// GetMessageIDsOk returns a tuple with the MessageIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailJobStatus) GetMessageIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.MessageIDs) {
		return nil, false
	}
	return o.MessageIDs, true
}

// HasMessageIDs returns a boolean if a field has been set.
func (o *EmailJobStatus) HasMessageIDs() bool {
	if o != nil && !IsNil(o.MessageIDs) {
		return true
	}

	return false
}

// SetMessageIDs gets a reference to the given []string and assigns it to the MessageIDs field.
func (o *EmailJobStatus) SetMessageIDs(v []string) {
	o.MessageIDs = v
}

func (o EmailJobStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailJobStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.RecipientsCount) {
		toSerialize["RecipientsCount"] = o.RecipientsCount
	}
	if !IsNil(o.Failed) {
		toSerialize["Failed"] = o.Failed
	}
	if !IsNil(o.FailedCount) {
		toSerialize["FailedCount"] = o.FailedCount
	}
	if !IsNil(o.Sent) {
		toSerialize["Sent"] = o.Sent
	}
	if !IsNil(o.SentCount) {
		toSerialize["SentCount"] = o.SentCount
	}
	if !IsNil(o.Delivered) {
		toSerialize["Delivered"] = o.Delivered
	}
	if !IsNil(o.DeliveredCount) {
		toSerialize["DeliveredCount"] = o.DeliveredCount
	}
	if !IsNil(o.Pending) {
		toSerialize["Pending"] = o.Pending
	}
	if !IsNil(o.PendingCount) {
		toSerialize["PendingCount"] = o.PendingCount
	}
	if !IsNil(o.Opened) {
		toSerialize["Opened"] = o.Opened
	}
	if !IsNil(o.OpenedCount) {
		toSerialize["OpenedCount"] = o.OpenedCount
	}
	if !IsNil(o.Clicked) {
		toSerialize["Clicked"] = o.Clicked
	}
	if !IsNil(o.ClickedCount) {
		toSerialize["ClickedCount"] = o.ClickedCount
	}
	if !IsNil(o.Unsubscribed) {
		toSerialize["Unsubscribed"] = o.Unsubscribed
	}
	if !IsNil(o.UnsubscribedCount) {
		toSerialize["UnsubscribedCount"] = o.UnsubscribedCount
	}
	if !IsNil(o.AbuseReports) {
		toSerialize["AbuseReports"] = o.AbuseReports
	}
	if !IsNil(o.AbuseReportsCount) {
		toSerialize["AbuseReportsCount"] = o.AbuseReportsCount
	}
	if !IsNil(o.MessageIDs) {
		toSerialize["MessageIDs"] = o.MessageIDs
	}
	return toSerialize, nil
}

type NullableEmailJobStatus struct {
	value *EmailJobStatus
	isSet bool
}

func (v NullableEmailJobStatus) Get() *EmailJobStatus {
	return v.value
}

func (v *NullableEmailJobStatus) Set(val *EmailJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailJobStatus(val *EmailJobStatus) *NullableEmailJobStatus {
	return &NullableEmailJobStatus{value: val, isSet: true}
}

func (v NullableEmailJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


