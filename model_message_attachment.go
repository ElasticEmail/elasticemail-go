/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// MessageAttachment struct for MessageAttachment
type MessageAttachment struct {
	// File's content as byte array (or a Base64 string)
	BinaryContent *string `json:"BinaryContent,omitempty"`
	// Display name of the file
	Name *string `json:"Name,omitempty"`
	// MIME content type
	ContentType *string `json:"ContentType,omitempty"`
}

// NewMessageAttachment instantiates a new MessageAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAttachment() *MessageAttachment {
	this := MessageAttachment{}
	return &this
}

// NewMessageAttachmentWithDefaults instantiates a new MessageAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAttachmentWithDefaults() *MessageAttachment {
	this := MessageAttachment{}
	return &this
}

// GetBinaryContent returns the BinaryContent field value if set, zero value otherwise.
func (o *MessageAttachment) GetBinaryContent() string {
	if o == nil || o.BinaryContent == nil {
		var ret string
		return ret
	}
	return *o.BinaryContent
}

// GetBinaryContentOk returns a tuple with the BinaryContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAttachment) GetBinaryContentOk() (*string, bool) {
	if o == nil || o.BinaryContent == nil {
		return nil, false
	}
	return o.BinaryContent, true
}

// HasBinaryContent returns a boolean if a field has been set.
func (o *MessageAttachment) HasBinaryContent() bool {
	if o != nil && o.BinaryContent != nil {
		return true
	}

	return false
}

// SetBinaryContent gets a reference to the given string and assigns it to the BinaryContent field.
func (o *MessageAttachment) SetBinaryContent(v string) {
	o.BinaryContent = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MessageAttachment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAttachment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MessageAttachment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MessageAttachment) SetName(v string) {
	o.Name = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *MessageAttachment) GetContentType() string {
	if o == nil || o.ContentType == nil {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAttachment) GetContentTypeOk() (*string, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *MessageAttachment) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *MessageAttachment) SetContentType(v string) {
	o.ContentType = &v
}

func (o MessageAttachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BinaryContent != nil {
		toSerialize["BinaryContent"] = o.BinaryContent
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.ContentType != nil {
		toSerialize["ContentType"] = o.ContentType
	}
	return json.Marshal(toSerialize)
}

type NullableMessageAttachment struct {
	value *MessageAttachment
	isSet bool
}

func (v NullableMessageAttachment) Get() *MessageAttachment {
	return v.value
}

func (v *NullableMessageAttachment) Set(val *MessageAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAttachment(val *MessageAttachment) *NullableMessageAttachment {
	return &NullableMessageAttachment{value: val, isSet: true}
}

func (v NullableMessageAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


