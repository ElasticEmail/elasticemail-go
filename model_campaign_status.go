/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
	"fmt"
)

// CampaignStatus the model 'CampaignStatus'
type CampaignStatus string

// List of CampaignStatus
const (
	DELETED CampaignStatus = "Deleted"
	ACTIVE CampaignStatus = "Active"
	PROCESSING CampaignStatus = "Processing"
	SENDING CampaignStatus = "Sending"
	COMPLETED CampaignStatus = "Completed"
	PAUSED CampaignStatus = "Paused"
	CANCELLED CampaignStatus = "Cancelled"
	DRAFT CampaignStatus = "Draft"
)

func (v *CampaignStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CampaignStatus(value)
	for _, existing := range []CampaignStatus{ "Deleted", "Active", "Processing", "Sending", "Completed", "Paused", "Cancelled", "Draft",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CampaignStatus", value)
}

// Ptr returns reference to CampaignStatus value
func (v CampaignStatus) Ptr() *CampaignStatus {
	return &v
}

type NullableCampaignStatus struct {
	value *CampaignStatus
	isSet bool
}

func (v NullableCampaignStatus) Get() *CampaignStatus {
	return v.value
}

func (v *NullableCampaignStatus) Set(val *CampaignStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignStatus(val *CampaignStatus) *NullableCampaignStatus {
	return &NullableCampaignStatus{value: val, isSet: true}
}

func (v NullableCampaignStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

