/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
)

// SortOrderItem Change the ordering of this inbound route for when matching the inbound
type SortOrderItem struct {
	PublicInboundId *string `json:"PublicInboundId,omitempty"`
	// 1 - route will be used first
	SortOrder *int32 `json:"SortOrder,omitempty"`
}

// NewSortOrderItem instantiates a new SortOrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortOrderItem() *SortOrderItem {
	this := SortOrderItem{}
	return &this
}

// NewSortOrderItemWithDefaults instantiates a new SortOrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortOrderItemWithDefaults() *SortOrderItem {
	this := SortOrderItem{}
	return &this
}

// GetPublicInboundId returns the PublicInboundId field value if set, zero value otherwise.
func (o *SortOrderItem) GetPublicInboundId() string {
	if o == nil || o.PublicInboundId == nil {
		var ret string
		return ret
	}
	return *o.PublicInboundId
}

// GetPublicInboundIdOk returns a tuple with the PublicInboundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortOrderItem) GetPublicInboundIdOk() (*string, bool) {
	if o == nil || o.PublicInboundId == nil {
		return nil, false
	}
	return o.PublicInboundId, true
}

// HasPublicInboundId returns a boolean if a field has been set.
func (o *SortOrderItem) HasPublicInboundId() bool {
	if o != nil && o.PublicInboundId != nil {
		return true
	}

	return false
}

// SetPublicInboundId gets a reference to the given string and assigns it to the PublicInboundId field.
func (o *SortOrderItem) SetPublicInboundId(v string) {
	o.PublicInboundId = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *SortOrderItem) GetSortOrder() int32 {
	if o == nil || o.SortOrder == nil {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortOrderItem) GetSortOrderOk() (*int32, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *SortOrderItem) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *SortOrderItem) SetSortOrder(v int32) {
	o.SortOrder = &v
}

func (o SortOrderItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicInboundId != nil {
		toSerialize["PublicInboundId"] = o.PublicInboundId
	}
	if o.SortOrder != nil {
		toSerialize["SortOrder"] = o.SortOrder
	}
	return json.Marshal(toSerialize)
}

type NullableSortOrderItem struct {
	value *SortOrderItem
	isSet bool
}

func (v NullableSortOrderItem) Get() *SortOrderItem {
	return v.value
}

func (v *NullableSortOrderItem) Set(val *SortOrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSortOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSortOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortOrderItem(val *SortOrderItem) *NullableSortOrderItem {
	return &NullableSortOrderItem{value: val, isSet: true}
}

func (v NullableSortOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


