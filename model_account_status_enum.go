/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * API version: 4.0.0
 * Contact: support@elasticemail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ElasticEmail

import (
	"encoding/json"
	"fmt"
)

// AccountStatusEnum the model 'AccountStatusEnum'
type AccountStatusEnum string

// List of AccountStatusEnum
const (
	DISABLED AccountStatusEnum = "Disabled"
	UNDER_REVIEW AccountStatusEnum = "UnderReview"
	NO_PAYMENTS_ALLOWED AccountStatusEnum = "NoPaymentsAllowed"
	NEVER_SIGNED_IN AccountStatusEnum = "NeverSignedIn"
	ACTIVE AccountStatusEnum = "Active"
)

func (v *AccountStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountStatusEnum(value)
	for _, existing := range []AccountStatusEnum{ "Disabled", "UnderReview", "NoPaymentsAllowed", "NeverSignedIn", "Active",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountStatusEnum", value)
}

// Ptr returns reference to AccountStatusEnum value
func (v AccountStatusEnum) Ptr() *AccountStatusEnum {
	return &v
}

type NullableAccountStatusEnum struct {
	value *AccountStatusEnum
	isSet bool
}

func (v NullableAccountStatusEnum) Get() *AccountStatusEnum {
	return v.value
}

func (v *NullableAccountStatusEnum) Set(val *AccountStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatusEnum(val *AccountStatusEnum) *NullableAccountStatusEnum {
	return &NullableAccountStatusEnum{value: val, isSet: true}
}

func (v NullableAccountStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

